@inject PersonInf_Model ViewModel
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<CascadingValue Value="this">
    <EditForm Model="ViewModel" OnSubmit=@FormSubmitted>
        <div id="@Id">
            <ul class="nav nav-pills nav-justified">
                @foreach (var step in Steps)
                {
                    <li id="step-@(StepsIndex(step) + 1)" class="nav-item">
                        <a class="nav-link @((ActiveStep == step) ? "active" : "")" href="javascript: void(0)"
                           @onclick="@(e=> SetActive(step))">@step.Name</a>
                    </li>
                }
            </ul>
            <div id="container-fluid">
                @ChildContent
            </div>
        </div>
        <div class="btns">
            <button class="btn btn-primary btn-lg" type="button"
                    disabled="@(ActiveStepIx == 0)" @onclick="GoBack">
                Tilbake
            </button>
            <input @bind-value=ViewModel.submitted checked hidden type="radio" />
            <button class="btn btn-primary btn-lg"
                    type="@(IsLastStep ? "submit" : "button")" @onclick="GoNext">
                @(IsLastStep ? "Send inn" : "Neste")
            </button>
        </div>
    </EditForm>
</CascadingValue>

@code {
    void FormSubmitted()
    {
        ViewModel.submitted = true;
        Navigation.NavigateTo("/", forceLoad: true);
    }


    void GoNext()
    {

        switch (ActiveStepIx)
        {
            case 0:
                if(ViewModel.name == "" || ViewModel.surname == "" || ViewModel.age <= 0
                    || ViewModel.mail == "" || ViewModel.mail == null || ViewModel.height <= 0 || ViewModel.weight <= 0)
                {
                    ViewModel.notValidated = true;
                    return;
                }
                break;
            case 1:
                if(ViewModel.activityLevel <= 0 || (ViewModel.weightLoss == false && ViewModel.muscleIncrease == false && ViewModel.maintenance == false
                    && ViewModel.fatLoss == false) || ViewModel.experienceLevel <= 0)
                {
                    ViewModel.notValidated = true;
                    return;
                }
                break;
            case 2:

                break;
            case 3:
                if (ViewModel.trainingDays <= 0 || ViewModel.trainingDays != ViewModel.preferedDays.Count)
                {
                    ViewModel.notValidated = true;
                    return;
                }
                break;
            case 4:
                if (ViewModel.mealAmount <= 0)
                {
                    ViewModel.notValidated = true;
                    return;
                }
                break;

        };
        ViewModel.notValidated = false;
        GoNext(Navigation);
    }
}
